"""
G√©n√©rateur de cl√©s s√©curis√©es pour le serveur MCP ComfyUI.
G√©n√®re MCP_API_KEY (pour ChatGPT) et WEBSOCKET_TOKEN (pour Extension Chrome).
"""

import secrets
from datetime import datetime
from pathlib import Path

def generate_api_key(length: int = 32) -> str:
    """
    G√©n√®re une cl√© API cryptographiquement s√©curis√©e.
    
    Args:
        length: Longueur de la cl√© (par d√©faut 32 caract√®res)
    
    Returns:
        Cl√© API URL-safe
    """
    return secrets.token_urlsafe(length)

if __name__ == "__main__":
    print("\n" + "="*70)
    print("üîë G√©n√©rateur de Cl√©s S√©curis√©es - Serveur MCP ComfyUI")
    print("="*70 + "\n")
    
    # G√©n√©rer les cl√©s
    mcp_api_key = generate_api_key(32)
    websocket_token = generate_api_key(32)
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    print(f"üìÖ Date de g√©n√©ration : {date}\n")
    
    print("üîê Vos cl√©s g√©n√©r√©es :")
    print("-" * 70)
    print(f"\n1Ô∏è‚É£  MCP_API_KEY (pour ChatGPT via API HTTP):")
    print(f"   {mcp_api_key}\n")
    print(f"2Ô∏è‚É£  WEBSOCKET_TOKEN (pour Extension Chrome):")
    print(f"   {websocket_token}\n")
    
    print("="*70)
    print("üìã CONFIGURATION .env")
    print("="*70)
    print("\nAjoutez ces lignes dans votre fichier .env :\n")
    print(f"MCP_API_KEY={mcp_api_key}")
    print(f"WEBSOCKET_TOKEN={websocket_token}\n")
    
    print("="*70)
    print("üìã CONFIGURATION CHATGPT")
    print("="*70)
    print("\nCustom Action / GPT Configuration:")
    print("  ‚Ä¢ Authentication Type: API Key")
    print("  ‚Ä¢ Custom Header Name: X-API-Key")
    print(f"  ‚Ä¢ API Key: {mcp_api_key}\n")
    
    print("="*70)
    print("üìã CONFIGURATION EXTENSION CHROME")
    print("="*70)
    print("\nDans le popup de l'extension :")
    print("  ‚Ä¢ URL: ws://127.0.0.1:8000/ws")
    print(f"  ‚Ä¢ Token: {websocket_token}\n")
    
    print("="*70)
    print("\n‚ö†Ô∏è  S√âCURIT√â - IMPORTANT :")
    print("="*70)
    print("  ‚Ä¢ Ne partagez JAMAIS ces cl√©s")
    print("  ‚Ä¢ Conservez-les uniquement dans .env (git ignor√©)")
    print("  ‚Ä¢ Reg√©n√©rez-les si elles sont compromises")
    print("  ‚Ä¢ Utilisez des cl√©s diff√©rentes pour chaque environnement")
    print("\n" + "="*70 + "\n")
    
    # Proposer de sauvegarder
    save = input("üíæ Voulez-vous cr√©er/mettre √† jour le fichier .env ? (o/n) : ")
    
    if save.lower() in ['o', 'oui', 'y', 'yes']:
        env_path = Path('.env')
        
        # V√©rifier si .env existe d√©j√†
        if env_path.exists():
            backup = input("\n‚ö†Ô∏è  Le fichier .env existe d√©j√†. Cr√©er une sauvegarde ? (o/n) : ")
            if backup.lower() in ['o', 'oui', 'y', 'yes']:
                backup_path = Path(f'.env.backup.{datetime.now().strftime("%Y%m%d_%H%M%S")}')
                env_path.rename(backup_path)
                print(f"‚úÖ Sauvegarde cr√©√©e : {backup_path}")
        
        env_content = f"""# Configuration Serveur MCP ComfyUI
# G√©n√©r√© le {date}

# ComfyUI
COMFYUI_BASE_URL=http://127.0.0.1:8188
WORKFLOWS_DIR=workflows
COMFYUI_PATH=D:\\ComfyUI_dev\\ComfyUI

# S√©curit√© - API Key pour ChatGPT (via HTTP/HTTPS)
MCP_API_KEY={mcp_api_key}

# S√©curit√© - Token WebSocket pour Extension Chrome
ENABLE_BROWSER_CONTROL=true
WEBSOCKET_TOKEN={websocket_token}

# Timeouts (en secondes)
HTTP_TIMEOUT=60
GENERATION_TIMEOUT=300

# Options navigateur (non utilis√© avec Extension Chrome)
BROWSER_HEADLESS=false
"""
        
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        print(f"\n‚úÖ Fichier .env cr√©√© avec succ√®s !")
        print(f"   Emplacement : {env_path.absolute()}")
        
        # Cr√©er aussi un .env.example (sans les vraies cl√©s)
        env_example_content = f"""# Configuration Serveur MCP ComfyUI
# Exemple de configuration - G√©n√©rez vos propres cl√©s avec generate_api_key.py

# ComfyUI
COMFYUI_BASE_URL=http://127.0.0.1:8188
WORKFLOWS_DIR=workflows
COMFYUI_PATH=D:\\ComfyUI_dev\\ComfyUI

# S√©curit√© - API Key pour ChatGPT (via HTTP/HTTPS)
# G√©n√©rez avec : python generate_api_key.py
MCP_API_KEY=votre_cle_api_ici

# S√©curit√© - Token WebSocket pour Extension Chrome
ENABLE_BROWSER_CONTROL=true
# G√©n√©rez avec : python generate_api_key.py
WEBSOCKET_TOKEN=votre_token_websocket_ici

# Timeouts (en secondes)
HTTP_TIMEOUT=60
GENERATION_TIMEOUT=300

# Options navigateur
BROWSER_HEADLESS=false
"""
        
        with open('.env.example', 'w', encoding='utf-8') as f:
            f.write(env_example_content)
        
        print(f"‚úÖ Fichier .env.example cr√©√© (template pour Git)")
        
        print("\n" + "="*70)
        print("üéâ CONFIGURATION TERMIN√âE")
        print("="*70)
        print("\n‚úÖ Prochaines √©tapes :")
        print("   1. Red√©marrez le serveur MCP : python server.py")
        print("   2. Configurez l'extension Chrome avec le WEBSOCKET_TOKEN")
        print("   3. Configurez ChatGPT avec le MCP_API_KEY")
        print("\n" + "="*70 + "\n")
        
    else:
        print("\n‚úÖ Copiez manuellement les cl√©s dans votre .env")
        print("   N'oubliez pas les deux cl√©s : MCP_API_KEY et WEBSOCKET_TOKEN\n")

